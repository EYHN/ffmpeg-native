name: Build Release
on:
  push:
  pull_request:
  workflow_dispatch:
      inputs:
        releaseVersion:
          description: 'Release Version'
env:
  releaseTag: ${{ github.event.inputs.releaseVersion && format('v{0}', github.event.inputs.releaseVersion) || format('AutoTag-{0}', github.run_number) }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          omitBody: true
          prerelease: true
          tag: ${{ env.releaseTag }}
          token: ${{ secrets.GITHUB_TOKEN }}
  build-macos:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: |
          ./macos.sh
      - name: Upload Release Asset
        id: upload-release-asset-gz
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: targets/*.tar.gz
          artifactContentType: application/gzip
          artifactErrorsFailBuild: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          prerelease: true
          tag: ${{ env.releaseTag }}
          token: ${{ secrets.GITHUB_TOKEN }}
  build-win:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: |
          ./win.sh
      - name: Upload Release Asset
        id: upload-release-asset-gz
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: targets/*.tar.gz
          artifactContentType: application/gzip
          artifactErrorsFailBuild: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          prerelease: true
          tag: ${{ env.releaseTag }}
          token: ${{ secrets.GITHUB_TOKEN }}
  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: |
          ./linux.sh
      - name: Upload Release Asset
        id: upload-release-asset-gz
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: targets/*.tar.gz
          artifactContentType: application/gzip
          artifactErrorsFailBuild: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          prerelease: true
          tag: ${{ env.releaseTag }}
          token: ${{ secrets.GITHUB_TOKEN }}
  release-nuget:
    needs: [build-linux, build-win, build-macos]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.releaseVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Package
        run: dotnet run --project packager/packager.csproj
        env:
          RELEASE_TAG: ${{ env.releaseTag }}
          RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}